<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- #6.1 datasource빈 등록 -->
	<context:property-placeholder location="classpath:datasource.properties"/>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> 
			<property name="driverClassName" value="${datasource.driverClassName}"/> 
			<property name="url" value="${datasource.url}"/> 
			<property name="username" value="${datasource.username}"/> 
			<property name="password" value="${datasource.password}"/> 
	</bean> 
	
	<!-- #6.2 mybatis에 SqlSessionFactoryBean, SqlSessionTemplate 빈등록 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath*:mapper/**/*-mapper.xml"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	
	<!-- SqlSession인터페이스 구현체. Dao 구현클래스에 DI되어 실행됨. -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" index="0"/>
	</bean>	

	<!-- #6.3 @Mapper 인터페이스 등록: Dao 구현객체(DaoImpl)를 동적으로 생성 -->
	<mybatis-spring:scan base-package="com.kh.**.dao"/>
	
	<!-- #11.1. 트랜잭션 매니저 빈 등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- @Transactional 어노테이션에 Transaction Advice를 적용 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
</beans>

